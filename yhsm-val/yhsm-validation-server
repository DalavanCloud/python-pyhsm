#!/usr/bin/env python
#
# Copyright (c) 2011, Yubico AB
# All rights reserved.
#

import re
import os
import sys
import syslog
import serial
import sqlite3
import argparse
import urlparse
import BaseHTTPServer
sys.path.append('Lib');
import pyhsm
import pyhsm.oath_hotp
import pyhsm.yubikey

default_device = "/dev/ttyACM0"
default_dir = "/dev/shm/yubico/secrets"
default_serve_url = "/yhsm/validate?"
default_db_file = "/var/yubico/yhsm-validation-server.db"
default_oath_window = 5

ykotp_valid_input = re.compile('^[cbdefghijklnrtuv]{32,48}$')
oath_valid_input = re.compile('^[cbdefghijklnrtuv0-9]{6,20}$')

hsm = None
args = None
saved_key_handle = None

class YHSM_KSMRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):

    def do_GET(self):
        global args
        if self.path.startswith(args.serve_url):
            res = None
            mode = None
            params = urlparse.parse_qs(self.path[len(args.serve_url):])
            if "otp" in params and args.mode_otp:
                # YubiKey OTP
                mode = 'YubiKey OTP'
                res = validate_yubikey_otp(self, params)
            elif "oath" in params and args.mode_oath:
                mode = 'OATH'
                res = validate_oath(self, params)
            elif "pwhash" in params and args.mode_pwhash:
                mode = 'Password hash'
                res = validate_pwhash(self, params)

            self.log_message("%s validation result: %s -> %s", mode, self.path, res)

            if res != None:
                self.send_response(200)
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                self.wfile.write(res)
                self.wfile.write("\n")
            else:
                self.log_error ("No validation result to '%s' (responding 403)" % (self.path))
                self.send_response(403, 'Forbidden')
                self.end_headers()
        else:
            self.log_error ("Bad URL '%s' - I'm serving '%s' (responding 403)" % (self.path, args.serve_url))
            self.send_response(403, 'Forbidden')
            self.end_headers()

    def log_error(self, format, *fmt_args):
        """ Log to syslog. """
        global args
        msg = self.my_address_string() + " - - " + format % fmt_args
        my_log_message(args, syslog.LOG_ERR, msg)

    def log_message(self, format, *fmt_args):
        """ Log to syslog. """
        global args
        msg = self.my_address_string() + " - - " + format % fmt_args
        my_log_message(args, syslog.LOG_INFO, msg)

    def my_address_string(self):
        """ For logging client host without resolving. """
        return self.client_address[0]

def validate_yubikey_otp(self, params):
    """
    Validate YubiKey OTP using YubiHSM internal database.
    """
    from_key = params["otp"][0]
    global ykotp_valid_input
    if not re.match(ykotp_valid_input, from_key):
        self.log_error("IN: %s, Invalid OTP" % (from_key))
        return "ERR Invalid OTP"
    global hsm
    try:
        res = pyhsm.yubikey.validate_otp(hsm, from_key)
        return "OK counter=%04x low=%04x high=%02x use=%02x" % \
            (res.use_ctr, res.ts_low, res.ts_high, res.session_ctr)
    except pyhsm.exception.YHSM_CommandFailed, e:
        return "ERR %s" % (pyhsm.defines.status2str(e.status))

def validate_oath(self, params):
    """
    Validate OATH code using YubiHSM HMAC-SHA1 hashing with token keys secured in AEAD's
    that we have stored in an SQLite3 database.
    """
    global args
    from_key = params["oath"][0]
    global oath_valid_input
    if not re.match(oath_valid_input, from_key):
        self.log_error("IN: %s, Invalid OATH OTP" % (params))
        return "ERR Invalid OATH OTP"
    uid, otp, = get_oath_bits(params)
    if not uid or not otp:
        self.log_error("IN: %s, could not get UID/OTP ('%s'/'%s')" % (params, uid, otp))
        return "ERR Invalid OATH input"
    if args.debug:
        print "OATH uid %s, OTP %s" % (uid, otp)

    # Fetch counter value for `uid' from database
    try:
        db = ValOathDb(args.db_file)
        entry = db.get(uid)
    except Exception, e:
        self.log_error("IN: %s, database error : '%s'" % (params, e))
        return "ERR Internal error"

    # Check for correct OATH OTP
    global hsm
    nonce = entry.data["nonce"].decode('hex')
    aead = entry.data["aead"].decode('hex')
    new_counter = pyhsm.oath_hotp.search_for_oath_code(hsm, entry.data["key_handle"], nonce, aead, \
                                                           entry.data["oath_c"], otp, args.look_ahead)
    if args.debug:
        print "OATH %i..%i -> new C == %s" % (entry.data["oath_c"], entry.data["oath_c"] + args.look_ahead, new_counter)
    if type(new_counter) != int:
        # XXX increase 'throttling parameter'
        return "ERR Could not validate OATH OTP"
    try:
        # Must successfully store new_counter before we return OK
        db.update_oath_c(entry, new_counter)
        return "OK counter=%04x" % (new_counter)
    except Exception, e:
        self.log_error("IN: %s, database error updating counter : %s" % (params, e))
        return "ERR Internal error"

def validate_pwhash(self, params):
    """
    Validate password hash using YubiHSM.
    """
    pwhash, nonce, aead, key_handle = get_pwhash_bits(params)
    plaintext = ":".join([nonce, pwhash])
    if hsm.aes_ecb_compare(key_handle, aead.decode('hex'), plaintext):
        return "OK pwhash validated"
    return "ERR Could not validate pwhash"

def get_pwhash_bits(params):
    """ Extract bits for password hash validation from params. """
    if not "pwhash" in params or \
            not "nonce" in params or \
            not "aead" in params or \
            not "kh" in params:
        raise Exception("Missing required parameter in request (pwhash, nonce, key, aead or kh)")
    pwhash = params["pwhash"][0]
    nonce = params["nonce"][0]
    aead = params["aead"][0]
    key_handle = pyhsm.util.key_handle_to_int(params["kh"][0])
    return pwhash, nonce, aead, key_handle

def get_oath_bits(params):
    """ Extract the OATH uid and OTP from params. """
    if "uid" in params:
        return params["uid"][0], params["oath"][0]
    m = re.match("^([cbdefghijklnrtuv]*)([0-9]{6,8})", params["oath"][0])
    uid, otp, = m.groups()
    uid = pyhsm.yubikey.modhex_decode(uid)
    return uid, int(otp),

class ValOathDb():
    """ Provides access to database with AEAD's and other information for OATH tokens. """

    def __init__(self, filename):
        self.filename = filename
        self.conn = sqlite3.connect(self.filename)
        self.conn.row_factory = sqlite3.Row


    def get(self, key):
        """ Fetch entry from database. """
        c = self.conn.cursor()
        for row in c.execute("SELECT key, nonce, key_handle, aead, oath_C, oath_T FROM oath WHERE key = ?", (key,)):
            return ValOathEntry(row)
        raise Exception("OATH token for '%s' not found in database (%s)" % (key, self.filename))

    def update_oath_c(self, entry, new_c):
        """
        Update the OATH HOTP counter value for `entry' in the database.

        Use SQL statement to ensure we only ever increase the counter.
        """
        key = entry.data["key"]
        c = self.conn.cursor()
        c.execute("UPDATE oath SET oath_c = ? WHERE key = ? AND ? > oath_c",
                  (new_c, key, new_c,))
        self.conn.commit()
        return c.rowcount == 1

class ValOathEntry():
    """ Class to hold a row of ValOathDb. """
    def __init__(self, row):
        if row:
            self.data = row

def parse_args():
    """
    Parse the command line arguments
    """
    global default_device
    global default_serve_url

    parser = argparse.ArgumentParser(description = "Validate secrets using YubiHSM",
                                     add_help=True
                                     )
    parser.add_argument('-D', '--device',
                        dest='device',
                        default=default_device,
                        required=False,
                        help='YubiHSM device (default : "%s").' % default_device
                        )
    parser.add_argument('-U', '--serve-url',
                        dest='serve_url',
                        default=default_serve_url,
                        required=False,
                        help='Base URL for decrypt web service (default : "%s").' % default_serve_url
                        )
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='store_true', default=False,
                        help='Enable verbose operation.'
                        )
    parser.add_argument('--debug',
                        dest='debug',
                        action='store_true', default=False,
                        help='Enable debug operation.'
                        )
    parser.add_argument('--port',
                        dest='listen_port',
                        type=int, default=8003,
                        required=False,
                        help='Port to listen on.'
                        )
    parser.add_argument('--addr',
                        dest='listen_addr',
                        default="127.0.0.1",
                        required=False,
                        help='Address to bind to.'
                        )
    parser.add_argument('--hmac-kh',
                        dest='hmac_kh',
                        required=False, default=0,
                        help='Key handle to use for creating HMAC-SHA1 hashes.'
                        )
    parser.add_argument('--otp',
                        dest='mode_otp',
                        action='store_true', default=False,
                        help='Enable YubiKey OTP validation.'
                        )
    parser.add_argument('--oath',
                        dest='mode_oath',
                        action='store_true', default=False,
                        help='Enable OATH-HOTP validation.'
                        )
    parser.add_argument('--pwhash',
                        dest='mode_pwhash',
                        action='store_true', default=False,
                        help='Enable password hash validation.'
                        )
    parser.add_argument('--db-file',
                        dest='db_file',
                        default=default_db_file,
                        required=False,
                        help='DB file for storing AEAD\'s etc. for --pwhash and --oath (default : "%s").' \
                            % default_db_file
                        )
    parser.add_argument('--oath-window',
                        dest='look_ahead',
                        required=False,
                        default = default_oath_window,
                        help='Number of OATH codes to search (default: %i).' % default_oath_window
                        )

    return parser.parse_args()

def args_fixup(args):
    global saved_key_handle
    saved_key_handle = args.hmac_kh

    args.key_handle = pyhsm.util.key_handle_to_int(args.hmac_kh)


def run(args):
    server_address = (args.listen_addr, args.listen_port)
    httpd = BaseHTTPServer.HTTPServer(server_address, YHSM_KSMRequestHandler)
    global saved_key_handle
    my_log_message(args, syslog.LOG_INFO, "Serving requests to 'http://%s:%s%s' (YubiHSM: '%s')" \
                       % (args.listen_addr, args.listen_port, args.serve_url, args.device))
    httpd.serve_forever()

def my_log_message(args, prio, msg):
    syslog.syslog(prio, msg)
    if args.debug or args.verbose or prio == syslog.LOG_ERR:
        sys.stderr.write("%s\n" % (msg))

def main():
    my_name = os.path.basename(sys.argv[0])
    if not my_name:
        my_name = "yhsm-validation-server"
    syslog.openlog(my_name, syslog.LOG_PID, syslog.LOG_LOCAL0)

    global args
    args = parse_args()
    args_fixup(args)

    global hsm
    try:
        hsm = pyhsm.YHSM(device = args.device, debug = args.debug)
    except serial.SerialException, e:
        my_log_message(args, syslog.LOG_ERR, 'Failed opening YubiHSM device "%s" : %s' %(args.device, e))
        sys.exit(1)

    try:
        run(args)
    except KeyboardInterrupt:
        print ""
        print "Shutting down"
        print ""

if __name__ == '__main__':
    main()
