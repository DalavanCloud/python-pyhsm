#!/usr/bin/env python
#
# Small network server decrypting YubiKey OTPs using an attached YubiHSM.
#
# To support unlimited numbers of YubiKeys, the YubiKey AES keys are
# stored in AEAD's (Authenticated Encryption with Associated Data) on
# the host computer.
#
# When an OTP is received, we find the right AEAD for this key (based on
# the public ID of the YubiKey), and then send the AEAD together with the
# OTP to the YubiHSM. The YubiHSM is able to decrypt the AEAD (if it has
# the appropriate key handle configured), and then able to decrypt the
# YubiKey OTP using the AES key stored in the AEAD.
#
# The information the YubiKey encrypted using it's AES key is then
# returned in clear text from the YubiHSM. This includes the counter
# information and also (relative) timestamps.
#
# It is not the job of the KSM (or YubiHSM) to ensure that the OTP has
# not been seen before - that is done by the validation server (using
# the database) :
#
#      O            +----------+
#     /|\           |Validation|     +-----+   +---------+
#      |  -- OTP--> |  server  | --> | KSM +---| YubiHSM |
#     / \           +----------+     +-----+   +---------+
#                         |
#     user             +--+--+
#                      | DB  |
#                      +-----+
#
# Copyright (c) 2011, Yubico AB
# All rights reserved.
#

import os
import sys
import BaseHTTPServer
import argparse
import syslog
import re
sys.path.append('Lib');
import pyhsm
import pyhsm.yubikey
import serial

default_device = "/dev/ttyACM0"
default_dir = "/dev/shm/yubico/secrets"
default_serve_url = "/wsapi/decrypt?otp="

valid_input_from_key = re.compile('^[cbdefghijklnrtuv]{32,48}$')

hsm = None
args = None
saved_key_handle = None

class YHSM_KSMRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):

    def do_GET(self):
        # Example session:
        # in  : GET /wsapi/decrypt?otp=ftftftccccdvvbfcfduvvcubikngtchlubtutucrld HTTP/1.0
        # out : OK counter=0004 low=f585 high=3e use=03
        global args
        if self.path.startswith(args.serve_url):
            from_key = self.path[len(args.serve_url):]

            global valid_input_from_key
            if not re.match(valid_input_from_key, from_key):
                self.log_error("IN: %s, Invalid public_id" % (from_key))
                self.send_response(403, 'Invalid public_id')
                return

            public_id, otp = pyhsm.yubikey.split_id_otp(from_key)

            global saved_key_handle
            filename = aead_filename(args.aead_dir, saved_key_handle, public_id)
            aead = pyhsm.aead_cmd.YHSM_GeneratedAEAD(public_id, args.key_handle, '')
            try:
                aead.load(filename)
            except IOError:
                self.log_error("IN: %s, File %s not found, or not readable" % (from_key, filename))
                self.send_response(404, 'Unknown public_id')
                return

            try:
                res = pyhsm.yubikey.validate_yubikey_with_aead(hsm, from_key, aead, args.key_handle)
                # XXX double-check public_id in res, in case BaseHTTPServer suddenly becomes multi-threaded
                # XXX fix use vs session counter confusion
                val_res = "OK counter=%04x low=%04x high=%02x use=%02x" % \
                    (res.use_ctr, res.ts_low, res.ts_high, res.session_ctr)
            except pyhsm.exception.YHSM_Error, e:
                self.log_error ("IN: %s, Validate FAILED: %s" % (from_key, str(e)))
                val_res = "ERR"

            self.log_message("SUCCESS OTP %s PT hsm %s", from_key, val_res)

            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(val_res)
            self.wfile.write("\n")
        else:
            self.log_error ("Bad URL '%s' - I'm serving '%s' (responding 403)" % (self.path, args.serve_url))
            self.send_response(403, 'Forbidden')
            self.end_headers()

    def log_error(self, format, *fmt_args):
        """ Log to syslog. """
        global args
        msg = self.my_address_string() + " - - " + format % fmt_args
        my_log_message(args, syslog.LOG_ERR, msg)

    def log_message(self, format, *fmt_args):
        """ Log to syslog. """
        global args
        msg = self.my_address_string() + " - - " + format % fmt_args
        my_log_message(args, syslog.LOG_INFO, msg)

    def my_address_string(self):
        """ For logging client host without resolving. """
        return self.client_address[0]

def aead_filename(aead_dir, key_handle, public_id):
    """
    Return the filename of the AEAD for this public_id.
    """
    parts = [aead_dir, key_handle] + pyhsm.util.group(public_id, 2) + [public_id]
    return os.path.join(*parts)

def parse_args():
    """
    Parse the command line arguments
    """
    global default_device
    global default_dir
    global default_serve_url

    parser = argparse.ArgumentParser(description = "Generate secrets using YubiHSM",
                                     add_help=True
                                     )
    parser.add_argument('-D', '--device',
                        dest='device',
                        default=default_device,
                        required=False,
                        help='YubiHSM device (default : "%s").' % default_device
                        )
    parser.add_argument('-B', '--aead-dir',
                        dest='aead_dir',
                        default=default_dir,
                        required=False,
                        help='Aead directory - base directory of your aeads (default : "%s").' % default_dir
                        )
    parser.add_argument('-U', '--serve-url',
                        dest='serve_url',
                        default=default_serve_url,
                        required=False,
                        help='Base URL for decrypt web service (default : "%s").' % default_serve_url
                        )
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='store_true', default=False,
                        help='Enable verbose operation.'
                        )
    parser.add_argument('--debug',
                        dest='debug',
                        action='store_true', default=False,
                        help='Enable debug operation.'
                        )
    parser.add_argument('--public-id-chars',
                        dest='public_id_chars',
                        type=int, default=12,
                        required=False,
                        help='Number of chars in generated public ids.'
                        )
    parser.add_argument('--port',
                        dest='listen_port',
                        type=int, default=8002,
                        required=False,
                        help='Port to listen on.'
                        )
    parser.add_argument('--addr',
                        dest='listen_addr',
                        default="127.0.0.1",
                        required=False,
                        help='Address to bind to.'
                        )
    parser.add_argument('--key-handle',
                        dest='key_handle',
                        required=True,
                        help='Key handle to use to decrypt aeads on the YHSM.'
                        )

    return parser.parse_args()

def args_fixup(args):
    if not os.path.isdir(args.aead_dir):
        my_log_message(args, syslog.LOG_ERR, "Aead directory '%s' does not exist." % (args.aead_dir))
        sys.exit(1)

    global saved_key_handle
    saved_key_handle = args.key_handle

    args.key_handle = pyhsm.util.key_handle_to_int(args.key_handle)


def run(args):
    server_address = (args.listen_addr, args.listen_port)
    httpd = BaseHTTPServer.HTTPServer(server_address, YHSM_KSMRequestHandler)
    global saved_key_handle
    my_log_message(args, syslog.LOG_INFO, "Serving requests to 'http://%s:%s%s' with key handle %s/%s (YHSM: '%s', AEADs in '%s')" \
                       % (args.listen_addr, args.listen_port, args.serve_url, saved_key_handle, args.key_handle, args.device, args.aead_dir))
    httpd.serve_forever()

def my_log_message(args, prio, msg):
    syslog.syslog(prio, msg)
    if args.debug or args.verbose or prio == syslog.LOG_ERR:
        sys.stderr.write("%s\n" % (msg))

def main():
    my_name = os.path.basename(sys.argv[0])
    if not my_name:
        my_name = "yhsm-yubikey-ksm"
    syslog.openlog(my_name, syslog.LOG_PID, syslog.LOG_LOCAL0)

    global args
    args = parse_args()
    args_fixup(args)

    global hsm
    try:
        hsm = pyhsm.YHSM(device = args.device, debug = args.debug)
    except serial.SerialException, e:
        my_log_message(args, syslog.LOG_ERR, 'Failed opening YHSM device "%s" : %s' %(args.device, e))
        sys.exit(1)

    try:
        run(args)
    except KeyboardInterrupt:
        print ""
        print "Shutting down"
        print ""

if __name__ == '__main__':
    main()
